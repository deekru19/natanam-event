{"version":3,"file":"static/js/429.4e26e656.chunk.js","mappings":"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","sources":["components/TimeSlotSelector.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { subscribeToSlots, initializeSlotsForDate } from '../services/firebaseService';\nimport { getEventDate, isAdjacentSlot, sortTimeSlots, timeToMinutes, getPricingTier, getSlotColor, getSlotBorderColor, getPricingTierInfo, getPriceForSlot } from '../utils/timeUtils';\nimport { eventConfig } from '../config/eventConfig';\n\ninterface TimeSlotSelectorProps {\n  selectedSlots: string[];\n  onSlotSelection: (slots: string[]) => void;\n  onNext: () => void;\n  onBack: () => void;\n  performanceType: string; // Add this to get pricing info\n}\n\ninterface TimeSection {\n  title: string;\n  startTime: number; // in minutes\n  endTime: number; // in minutes\n}\n\nconst TimeSlotSelector: React.FC<TimeSlotSelectorProps> = ({ selectedSlots, onSlotSelection, onNext, onBack, performanceType }) => {\n  const [slots, setSlots] = useState<Record<string, string>>({});\n  const [loading, setLoading] = useState(true);\n\n  // Define time sections\n  const timeSections: TimeSection[] = [\n    { title: 'Morning', startTime: 9 * 60, endTime: 12 * 60 }, // 9 AM to 12 PM\n    { title: 'Afternoon', startTime: 12 * 60, endTime: 17 * 60 }, // 12 PM to 5 PM\n    { title: 'Evening', startTime: 17 * 60, endTime: 20 * 60 }, // 5 PM to 8 PM\n  ];\n\n  useEffect(() => {\n    const eventDate = getEventDate();\n    \n    // Initialize slots if they don't exist\n    initializeSlotsForDate(eventDate);\n    \n    // Subscribe to real-time updates\n    const unsubscribe = subscribeToSlots(eventDate, (updatedSlots) => {\n      // Sort the slots by time of day\n      const sortedSlots = sortTimeSlots(updatedSlots);\n      setSlots(sortedSlots);\n      setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  const handleSlotClick = (timeSlot: string) => {\n    if (slots[timeSlot] !== 'available') return;\n\n    let newSelectedSlots: string[];\n\n    if (selectedSlots.includes(timeSlot)) {\n      // Remove slot\n      newSelectedSlots = selectedSlots.filter(slot => slot !== timeSlot);\n    } else {\n      // Add slot - ensure it's continuous with existing selection\n      if (selectedSlots.length === 0) {\n        // First slot selection\n        newSelectedSlots = [timeSlot];\n      } else {\n        // Check if the new slot is adjacent to any existing slot\n        const isAdjacent = selectedSlots.some(slot => isAdjacentSlot(slot, timeSlot));\n        \n        if (isAdjacent) {\n          // Add to existing continuous selection\n          newSelectedSlots = [...selectedSlots, timeSlot];\n          // Sort by time to maintain order\n          newSelectedSlots.sort((a, b) => timeToMinutes(a) - timeToMinutes(b));\n        } else {\n          // Replace selection with new slot (not continuous)\n          newSelectedSlots = [timeSlot];\n        }\n      }\n    }\n\n    onSlotSelection(newSelectedSlots);\n  };\n\n  const getSlotStatus = (timeSlot: string) => {\n    if (selectedSlots.includes(timeSlot)) {\n      return 'selected';\n    }\n    return slots[timeSlot] || 'available';\n  };\n\n  const getSlotsForSection = (section: TimeSection) => {\n    return Object.keys(slots).filter(timeSlot => {\n      const minutes = timeToMinutes(timeSlot);\n      return minutes >= section.startTime && minutes < section.endTime;\n    });\n  };\n\n  const renderTimeSection = (section: TimeSection) => {\n    const sectionSlots = getSlotsForSection(section);\n    \n    if (sectionSlots.length === 0) {\n      return null;\n    }\n\n    return (\n      <div key={section.title} className=\"space-y-4\">\n        <h4 className=\"text-lg font-semibold text-gray-800 border-b border-gray-200 pb-2\">\n          {section.title} ({sectionSlots.length} slots available)\n        </h4>\n        <div className=\"grid grid-cols-4 gap-2 sm:grid-cols-4 md:grid-cols-5 lg:grid-cols-6\">\n          {sectionSlots.map((timeSlot) => {\n            const status = getSlotStatus(timeSlot);\n            const tier = getPricingTier(timeSlot);\n            const price = getPriceForSlot(timeSlot, performanceType);\n            const slotColor = getSlotColor(timeSlot);\n            const borderColor = getSlotBorderColor(timeSlot);\n            const isTimePricingEnabled = eventConfig.timePricing?.enabled;\n            \n            // Get tier display name\n            const tierDisplayName = tier && eventConfig.timePricing?.timeRanges[tier]?.displayName;\n            \n            return (\n              <div key={timeSlot} className=\"relative group\">\n                <button\n                  onClick={() => handleSlotClick(timeSlot)}\n                  disabled={slots[timeSlot] === 'booked'}\n                  className={`\n                    w-full p-2 sm:p-3 text-xs sm:text-sm font-medium rounded-lg border-2 transition-all duration-200 relative\n                    ${status === 'available' \n                      ? 'text-gray-700 hover:border-blue-500 hover:bg-blue-50' \n                      : status === 'selected'\n                      ? 'border-blue-500 bg-blue-500 text-white'\n                      : 'border-gray-200 bg-gray-100 text-gray-400 cursor-not-allowed'\n                    }\n                  `}\n                  style={{\n                    backgroundColor: status === 'available' && isTimePricingEnabled && slotColor !== 'transparent'\n                      ? slotColor\n                      : status === 'available' \n                      ? 'white'\n                      : undefined,\n                    borderColor: status === 'available' && isTimePricingEnabled && borderColor !== 'transparent'\n                      ? borderColor\n                      : status === 'selected'\n                      ? '#3B82F6' // blue-500\n                      : undefined\n                  }}\n                  title={isTimePricingEnabled && tier && tierDisplayName ? `${tierDisplayName} - ₹${price}` : undefined}\n                >\n                  <div className=\"text-center\">\n                    <div>{timeSlot}</div>\n                  </div>\n                </button>\n                \n                {/* Tooltip */}\n                {isTimePricingEnabled && tier && tierDisplayName && status !== 'booked' && (\n                  <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-gray-800 text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none z-10 whitespace-nowrap\">\n                    {tierDisplayName}: ₹{price}\n                  </div>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  };\n\n  const handleNext = () => {\n    if (selectedSlots.length > 0) {\n      onNext();\n    }\n  };\n\n  const renderPricingLegend = () => {\n    const pricingInfo = getPricingTierInfo();\n    if (!pricingInfo) return null;\n\n    // Get the price for the current performance type\n    const getPriceForType = (pricing: any) => {\n      switch (performanceType) {\n        case 'solo':\n          return pricing.solo;\n        case 'duet':\n          return pricing.duet;\n        case 'group':\n          return pricing.group;\n        default:\n          return 0;\n      }\n    };\n\n    // Get display name for performance type\n    const getTypeDisplayName = () => {\n      switch (performanceType) {\n        case 'solo':\n          return 'Solo';\n        case 'duet':\n          return 'Duet';\n        case 'group':\n          return 'Group';\n        default:\n          return 'Performance';\n      }\n    };\n\n    return (\n      <div className=\"bg-white border border-gray-200 rounded-lg p-2 mb-3\">\n        <div className=\"flex flex-wrap items-center justify-center gap-1 sm:gap-2\">\n          <span className=\"text-xs font-medium text-gray-700 mr-2\">{getTypeDisplayName()}:</span>\n          {Object.entries(pricingInfo).map(([tier, info]) => (\n            <div \n              key={tier}\n              className=\"flex items-center gap-1 px-2 py-1 rounded border text-xs\"\n              style={{ \n                backgroundColor: info.pricing.color,\n                borderColor: info.pricing.borderColor\n              }}\n            >\n              <span className=\"font-medium text-gray-800\">{info.name}</span>\n              <span className=\"font-bold text-gray-800\">₹{getPriceForType(info.pricing)}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center p-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header without Back Button */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n        <div>\n          <h3 className=\"text-xl font-bold text-gray-800\">Select Time Slots</h3>\n          <p className=\"text-sm text-gray-600 mt-1\">\n            Click on available slots to select them. You can select multiple continuous slots.\n          </p>\n        </div>\n      </div>\n      \n      {/* Pricing Legend */}\n      {renderPricingLegend()}\n      \n      {/* Time Sections */}\n      <div className=\"space-y-6\">\n        {timeSections.map(renderTimeSection)}\n      </div>\n      \n      {/* Selected Slots Summary */}\n      {selectedSlots.length > 0 && (\n        <div className=\"mt-6 p-3 sm:p-4 bg-blue-50 rounded-lg\">\n          <h4 className=\"font-medium text-blue-800 mb-2 text-sm sm:text-base\">\n            Selected Continuous Slots ({selectedSlots.length})\n          </h4>\n          <div className=\"flex flex-wrap gap-1 sm:gap-2\">\n            {selectedSlots.map((slot, index) => (\n              <span\n                key={index}\n                className=\"px-2 sm:px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-xs sm:text-sm font-medium\"\n              >\n                {slot}\n              </span>\n            ))}\n          </div>\n          <p className=\"text-xs sm:text-sm text-blue-600 mt-2\">\n            Total: {selectedSlots.length} slot{selectedSlots.length !== 1 ? 's' : ''}\n          </p>\n        </div>\n      )}\n\n      {/* Instructions */}\n      <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n        <h4 className=\"font-medium text-yellow-800 mb-2\">Selection Rules</h4>\n        <ul className=\"text-sm text-yellow-700 space-y-1\">\n          <li>• You can select multiple continuous slots (e.g., 9:00 AM, 9:10 AM, 9:20 AM)</li>\n          <li>• Slots must be adjacent to each other</li>\n          <li>• Click a selected slot again to deselect it</li>\n          <li>• Selecting a non-adjacent slot will replace your current selection</li>\n          <li>• Booked slots are grayed out and unavailable</li>\n        </ul>\n      </div>\n\n      {/* Bottom Navigation */}\n      <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4 pt-4\">\n        <button\n          onClick={onBack}\n          className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 hover:border-gray-400 transition-all duration-200 shadow-sm w-full sm:w-auto\"\n        >\n          ← Back\n        </button>\n        <button\n          onClick={handleNext}\n          disabled={selectedSlots.length === 0}\n          className={`\n            px-4 sm:px-6 py-2 sm:py-3 rounded-lg font-medium transition-colors text-sm sm:text-base w-full sm:w-auto\n            ${selectedSlots.length > 0\n              ? 'bg-blue-600 text-white hover:bg-blue-700'\n              : 'bg-gray-300 text-gray-500 cursor-not-allowed'\n            }\n          `}\n        >\n          {selectedSlots.length > 0 \n            ? `Continue with ${selectedSlots.length} slot${selectedSlots.length !== 1 ? 's' : ''}`\n            : 'Select at least one slot'\n          }\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default TimeSlotSelector; "],"names":["_ref","selectedSlots","onSlotSelection","onNext","onBack","performanceType","slots","setSlots","useState","loading","setLoading","useEffect","eventDate","getEventDate","initializeSlotsForDate","unsubscribe","subscribeToSlots","updatedSlots","sortedSlots","sortTimeSlots","_jsx","className","children","_jsxs","renderPricingLegend","pricingInfo","getPricingTierInfo","getPriceForType","pricing","solo","duet","group","getTypeDisplayName","Object","entries","map","_ref2","tier","info","style","backgroundColor","color","borderColor","name","title","startTime","endTime","section","sectionSlots","keys","filter","timeSlot","minutes","timeToMinutes","getSlotsForSection","length","_eventConfig$timePric","_eventConfig$timePric2","_eventConfig$timePric3","status","includes","getSlotStatus","getPricingTier","price","getPriceForSlot","slotColor","getSlotColor","getSlotBorderColor","isTimePricingEnabled","eventConfig","timePricing","enabled","tierDisplayName","timeRanges","displayName","onClick","newSelectedSlots","slot","some","isAdjacentSlot","sort","a","b","handleSlotClick","disabled","undefined","index","handleNext"],"sourceRoot":""}