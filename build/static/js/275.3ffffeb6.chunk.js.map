{"version":3,"file":"static/js/275.3ffffeb6.chunk.js","mappings":"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","sources":["components/PaymentSummary.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { eventConfig } from '../config/eventConfig';\nimport { getPriceForSlot, getPricingTier, getTierDisplayName } from '../utils/timeUtils';\n\ninterface PaymentSummaryProps {\n  selectedSlots: string[];\n  performanceType: string;\n  participantDetails: Record<string, any>;\n  onBack: () => void;\n  onPaymentSuccess: (paymentData: any) => void;\n  onPaymentFailure: (errorData: any) => void;\n}\n\nconst PaymentSummary: React.FC<PaymentSummaryProps> = ({\n  selectedSlots,\n  performanceType,\n  participantDetails,\n  onBack,\n  onPaymentSuccess,\n  onPaymentFailure\n}) => {\n  // All hooks must be called at the top level, before any conditional returns\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string>('');\n  \n  const selectedType = eventConfig.performanceTypes.find(type => type.id === performanceType);\n  \n  if (!selectedType) {\n    return <div>Invalid performance type.</div>;\n  }\n\n  const getParticipantCount = () => {\n    switch (performanceType) {\n      case 'solo':\n        return 1;\n      case 'duet':\n        return 2;\n      case 'group':\n        // Count participants from the textarea (assuming comma or newline separated)\n        const participantNames = participantDetails.participantNames || '';\n        if (participantNames.trim()) {\n          // Split by comma or newline and count non-empty entries\n          const participants = participantNames.split(/[,\\n]/).filter((name: string) => name.trim()).length;\n          return Math.max(participants, 1); // At least 1 participant\n        }\n        return 3; // Default group size\n      default:\n        return 1;\n    }\n  };\n\n  const participantCount = getParticipantCount();\n  \n  // Calculate total cost using time-based pricing\n  const calculateTotalCost = () => {\n    return selectedSlots.reduce((total, slot) => {\n      const slotPrice = getPriceForSlot(slot, performanceType);\n      return total + (slotPrice * participantCount);\n    }, 0);\n  };\n  \n  const totalCost = calculateTotalCost();\n\n  // Get slot pricing breakdown for display\n  const getSlotPricingBreakdown = () => {\n    return selectedSlots.map(slot => ({\n      slot,\n      price: getPriceForSlot(slot, performanceType),\n      tier: getPricingTier(slot)\n    }));\n  };\n\n  const getParticipantDisplayName = () => {\n    switch (performanceType) {\n      case 'solo':\n        return participantDetails.fullName || 'N/A';\n      case 'duet':\n        return `${participantDetails.participant1Name || 'N/A'} & ${participantDetails.participant2Name || 'N/A'}`;\n      case 'group':\n        const participantNames = participantDetails.participantNames || '';\n        if (participantNames.trim()) {\n          const participants = participantNames.split(/[,\\n]/).filter((name: string) => name.trim());\n          return participants.length > 0 ? participants.join(', ') : 'N/A';\n        }\n        return 'N/A';\n      default:\n        return 'N/A';\n    }\n  };\n\n  // Payment functions\n  const loadRazorpayScript = () => {\n    return new Promise((resolve) => {\n      const script = document.createElement('script');\n      script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n      script.onload = () => resolve(true);\n      script.onerror = () => resolve(false);\n      document.body.appendChild(script);\n    });\n  };\n\n  const getParticipantName = () => {\n    switch (performanceType) {\n      case 'solo':\n        return participantDetails.fullName || 'N/A';\n      case 'duet':\n        return participantDetails.participant1Name || 'N/A';\n      case 'group':\n        const participantNames = participantDetails.participantNames || '';\n        if (participantNames.trim()) {\n          const participants = participantNames.split(/[,\\n]/).filter((name: string) => name.trim());\n          return participants[0] || 'N/A';\n        }\n        return 'N/A';\n      default:\n        return 'N/A';\n    }\n  };\n\n  const getContactInfo = () => {\n    const phone = participantDetails.phoneNumber || participantDetails.participant1Phone || participantDetails.representativePhone || '';\n    const email = participantDetails.email || '';\n    return { phone, email };\n  };\n\n  const handlePayment = async () => {\n    setLoading(true);\n    setError('');\n\n    try {\n      // Load Razorpay script\n      const isScriptLoaded = await loadRazorpayScript();\n      \n      if (!isScriptLoaded) {\n        throw new Error('Failed to load Razorpay. Please check your internet connection.');\n      }\n\n      const { phone, email } = getContactInfo();\n      \n      // Create order using direct Firebase Function URL\n      const projectId = process.env.REACT_APP_FIREBASE_PROJECT_ID;\n      if (!projectId) {\n        throw new Error('Firebase Project ID not configured. Please check environment variables.');\n      }\n      \n      const functionUrl = `https://us-central1-${projectId}.cloudfunctions.net/createRazorpayOrder`;\n      console.log('🌐 Creating order via Firebase Function:', functionUrl);\n      \n      const orderResp = await fetch(functionUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          amount: totalCost * 100,\n          currency: 'INR',\n          notes: {\n            performance_type: performanceType,\n            time_slots: selectedSlots.join(', '),\n            participant_count: participantCount.toString(),\n          },\n        }),\n      });\n      \n      if (!orderResp.ok) {\n        const errorText = await orderResp.text();\n        throw new Error(`Order creation failed: ${orderResp.status} - ${errorText}`);\n      }\n      \n      const data = await orderResp.json();\n      const orderId = data?.order?.id;\n      \n      if (!orderId) {\n        throw new Error('Order created but no order ID returned from backend');\n      }\n      \n      console.log('✅ Order created successfully:', orderId);\n\n      const options: any = {\n        key: process.env.REACT_APP_RAZORPAY_KEY_ID || 'rzp_test_your_key_here',\n        amount: totalCost * 100,\n        currency: 'INR',\n        name: eventConfig.eventName,\n        description: `${selectedType.name} Performance Registration`,\n        image: '/logo192.png',\n        order_id: orderId,\n        handler: function (response: any) {\n          console.log('🎉 Payment Success:', response);\n          onPaymentSuccess({\n            paymentId: response.razorpay_payment_id,\n            orderId: response.razorpay_order_id,\n            signature: response.razorpay_signature,\n            amount: totalCost,\n            currency: 'INR'\n          });\n        },\n        prefill: {\n          name: getParticipantName(),\n          email: email,\n          contact: phone\n        },\n        notes: {\n          performance_type: performanceType,\n          time_slots: selectedSlots.join(', '),\n          participant_count: participantCount.toString()\n        },\n        theme: {\n          color: '#2563eb'\n        },\n        modal: {\n          ondismiss: function() {\n            setLoading(false);\n          }\n        }\n      };\n\n      const razorpay = new (window as any).Razorpay(options);\n      \n      razorpay.on('payment.failed', function (response: any) {\n        console.log('❌ Payment Failed:', response);\n        onPaymentFailure({\n          error: response.error,\n          reason: response.error.reason,\n          description: response.error.description\n        });\n      });\n\n      razorpay.open();\n      setLoading(false);\n      \n    } catch (err: any) {\n      console.error('💥 Payment initialization failed:', err);\n      setError(err.message || 'Failed to initialize payment. Please try again.');\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header without Back Button */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-xl font-bold text-gray-800\">Payment Summary</h3>\n        </div>\n      </div>\n\n      <div className=\"bg-gray-50 rounded-lg p-6 space-y-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <h4 className=\"font-medium text-gray-700 mb-2\">Performance Details</h4>\n            <div className=\"space-y-1 text-sm text-gray-600\">\n              <p><span className=\"font-medium\">Type:</span> {selectedType.name}</p>\n              <p><span className=\"font-medium\">Participant(s):</span> {getParticipantDisplayName()}</p>\n              <p><span className=\"font-medium\">Dance Style:</span> {participantDetails.performanceCategory || 'N/A'}</p>\n            </div>\n          </div>\n          \n          <div>\n            <h4 className=\"font-medium text-gray-700 mb-2\">Time Slots</h4>\n            <div className=\"space-y-1 text-sm text-gray-600\">\n              <p><span className=\"font-medium\">Selected:</span> {selectedSlots.length} slot{selectedSlots.length !== 1 ? 's' : ''}</p>\n              <p><span className=\"font-medium\">Times:</span></p>\n              <div className=\"ml-4\">\n                {eventConfig.timePricing?.enabled ? (\n                  getSlotPricingBreakdown().map((slotInfo, index) => (\n                    <p key={index} className=\"text-gray-600 flex justify-between\">\n                      <span>• {slotInfo.slot}</span>\n                      <span className=\"text-xs\">\n                        {slotInfo.tier && getTierDisplayName(slotInfo.tier) && `${getTierDisplayName(slotInfo.tier)} - `}₹{slotInfo.price}\n                      </span>\n                    </p>\n                  ))\n                ) : (\n                  selectedSlots.map((slot, index) => (\n                    <p key={index} className=\"text-gray-600\">• {slot}</p>\n                  ))\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"border-t pt-4\">\n          <div className=\"space-y-2\">\n            {eventConfig.timePricing?.enabled ? (\n              <div className=\"text-sm text-slate-600\">\n                <p className=\"font-medium mb-2\">Pricing Breakdown:</p>\n                {getSlotPricingBreakdown().map((slotInfo, index) => (\n                  <div key={index} className=\"flex justify-between items-center\">\n                    <span>{slotInfo.slot} × {participantCount} person{participantCount !== 1 ? 's' : ''}</span>\n                    <span>₹{(slotInfo.price * participantCount).toLocaleString()}</span>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <>\n                <div className=\"flex justify-between items-center text-sm text-slate-600\">\n                  <span>Price per person:</span>\n                  <span>₹{selectedType.pricePerPerson}</span>\n                </div>\n              </>\n            )}\n            <div className=\"flex justify-between items-center text-sm text-slate-600\">\n              <span>Number of participants:</span>\n              <span>{participantCount}</span>\n            </div>\n            <div className=\"flex justify-between items-center text-sm text-slate-600\">\n              <span>Number of slots:</span>\n              <span>{selectedSlots.length}</span>\n            </div>\n            <div className=\"border-t pt-2 mt-2\">\n              <div className=\"flex justify-between items-center text-base font-medium\">\n                <span>Total Amount:</span>\n                <span className=\"text-slate-700\">₹{totalCost.toLocaleString()}</span>\n              </div>\n              {!eventConfig.timePricing?.enabled && (\n                <p className=\"text-xs text-slate-500 mt-1\">\n                  ₹{selectedType.pricePerPerson} × {participantCount} person{participantCount !== 1 ? 's' : ''} × {selectedSlots.length} slot{selectedSlots.length !== 1 ? 's' : ''}\n                </p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n        <h4 className=\"font-medium text-yellow-800 mb-2\">Payment Instructions</h4>\n        <ul className=\"text-sm text-yellow-700 space-y-1\">\n          <li>• Please complete the payment using UPI or any preferred method</li>\n          <li>• Amount to pay: ₹{totalCost.toLocaleString()}</li>\n          <li>• Your booking will be confirmed after payment verification</li>\n        </ul>\n      </div>\n\n      {/* Error Display */}\n      {error && (\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n          <p className=\"text-sm text-red-600\">{error}</p>\n        </div>\n      )}\n\n      {/* Bottom Navigation */}\n      <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4\">\n        <button\n          onClick={onBack}\n          className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 hover:border-gray-400 transition-all duration-200 shadow-sm w-full sm:w-auto\"\n        >\n          ← Back\n        </button>\n        <button\n          onClick={handlePayment}\n          disabled={loading}\n          className={`\n            px-6 py-3 rounded-lg font-medium transition-colors disabled:opacity-50 disabled:cursor-not-allowed w-full sm:w-auto\n            ${loading \n              ? 'bg-gray-400 text-white cursor-not-allowed' \n              : 'bg-green-600 text-white hover:bg-green-700'\n            }\n          `}\n        >\n          {loading ? 'Processing...' : `Pay ₹${totalCost.toLocaleString()}`}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default PaymentSummary; "],"names":["_ref","_eventConfig$timePric","_eventConfig$timePric2","_eventConfig$timePric3","selectedSlots","performanceType","participantDetails","onBack","onPaymentSuccess","onPaymentFailure","loading","setLoading","useState","error","setError","selectedType","eventConfig","performanceTypes","find","type","id","_jsx","children","participantCount","getParticipantCount","participantNames","trim","participants","split","filter","name","length","Math","max","totalCost","reduce","total","slot","getPriceForSlot","getSlotPricingBreakdown","map","price","tier","getPricingTier","getParticipantName","fullName","participant1Name","_jsxs","className","getParticipantDisplayName","participant2Name","join","performanceCategory","timePricing","enabled","slotInfo","index","getTierDisplayName","toLocaleString","_Fragment","pricePerPerson","onClick","async","_data$order","Promise","resolve","script","document","createElement","src","onload","onerror","body","appendChild","Error","phone","email","phoneNumber","participant1Phone","representativePhone","projectId","process","functionUrl","console","log","orderResp","fetch","method","headers","JSON","stringify","amount","currency","notes","performance_type","time_slots","participant_count","toString","ok","errorText","text","status","data","json","orderId","order","options","key","eventName","description","image","order_id","handler","response","paymentId","razorpay_payment_id","razorpay_order_id","signature","razorpay_signature","prefill","contact","theme","color","modal","ondismiss","razorpay","window","Razorpay","on","reason","open","err","message","disabled"],"sourceRoot":""}