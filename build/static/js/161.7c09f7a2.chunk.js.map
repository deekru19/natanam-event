{"version":3,"file":"static/js/161.7c09f7a2.chunk.js","mappings":"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","sources":["components/RazorpayPayment.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { eventConfig } from '../config/eventConfig';\n\ndeclare global {\n  interface Window {\n    Razorpay: any;\n  }\n}\n\ninterface RazorpayPaymentProps {\n  selectedSlots: string[];\n  performanceType: string;\n  participantDetails: Record<string, any>;\n  onPaymentSuccess: (paymentData: any) => void;\n  onPaymentFailure: (error: any) => void;\n  onBack: () => void;\n}\n\nconst RazorpayPayment: React.FC<RazorpayPaymentProps> = ({\n  selectedSlots,\n  performanceType,\n  participantDetails,\n  onPaymentSuccess,\n  onPaymentFailure,\n  onBack\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string>('');\n\n  const selectedType = eventConfig.performanceTypes.find(type => type.id === performanceType);\n  \n  if (!selectedType) {\n    return <div>Invalid performance type.</div>;\n  }\n\n  const getParticipantCount = () => {\n    switch (performanceType) {\n      case 'solo':\n        return 1;\n      case 'duet':\n        return 2;\n      case 'group':\n        const participantNames = participantDetails.participantNames || '';\n        if (participantNames.trim()) {\n          const participants = participantNames.split(/[,\\n]/).filter((name: string) => name.trim()).length;\n          return Math.max(participants, 1);\n        }\n        return 3;\n      default:\n        return 1;\n    }\n  };\n\n  const participantCount = getParticipantCount();\n  const totalAmount = selectedSlots.length * selectedType.pricePerPerson * participantCount;\n\n  const getParticipantName = () => {\n    switch (performanceType) {\n      case 'solo':\n        return participantDetails.fullName || 'N/A';\n      case 'duet':\n        return participantDetails.participant1Name || 'N/A';\n      case 'group':\n        const participantNames = participantDetails.participantNames || '';\n        if (participantNames.trim()) {\n          const participants = participantNames.split(/[,\\n]/).filter((name: string) => name.trim());\n          return participants[0] || 'N/A';\n        }\n        return 'N/A';\n      default:\n        return 'N/A';\n    }\n  };\n\n  const getContactInfo = () => {\n    const phone = participantDetails.phoneNumber || participantDetails.participant1Phone || participantDetails.representativePhone || '';\n    const email = participantDetails.email || '';\n    return { phone, email };\n  };\n\n  const loadRazorpayScript = () => {\n    return new Promise((resolve) => {\n      const script = document.createElement('script');\n      script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n      script.onload = () => resolve(true);\n      script.onerror = () => resolve(false);\n      document.body.appendChild(script);\n    });\n  };\n\n  const handlePayment = async () => {\n    setLoading(true);\n    setError('');\n\n    try {\n      // Load Razorpay script\n      const isScriptLoaded = await loadRazorpayScript();\n      \n      if (!isScriptLoaded) {\n        throw new Error('Failed to load Razorpay. Please check your internet connection.');\n      }\n\n      const { phone, email } = getContactInfo();\n      \n      // Create order on backend with auto-capture - CRITICAL for auto-capture to work\n      console.log('üöÄ Creating Razorpay order for amount:', totalAmount * 100, 'paise');\n      let orderId: string | undefined;\n\n      // Create order function\n      const createOrder = async (url: string) => {\n        try {\n          console.log('üåê Calling Firebase Function at:', url);\n          \n          const orderResp = await fetch(url, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n              amount: totalAmount * 100,\n              currency: 'INR',\n              notes: {\n                performance_type: performanceType,\n                time_slots: selectedSlots.join(', '),\n                participant_count: participantCount.toString(),\n              },\n            }),\n          });\n          \n          console.log('üì° Order creation response status:', orderResp.status);\n          console.log('üì° Order creation response headers:', Object.fromEntries(orderResp.headers.entries()));\n          \n          if (orderResp.ok) {\n            const data = await orderResp.json();\n            console.log('‚úÖ Order created successfully:', data);\n            return data?.order?.id;\n          } else {\n            const errorText = await orderResp.text();\n            console.error('‚ùå Order creation failed with status:', orderResp.status);\n            console.error('‚ùå Order creation error response:', errorText);\n            throw new Error(`Order creation failed: ${orderResp.status} - ${errorText}`);\n          }\n        } catch (error: any) {\n          console.error('‚ùå Order creation failed:', error);\n          throw error;\n        }\n      };\n\n      // Create order using direct Firebase Function URL\n      // This approach works reliably in both local development and production\n      // No more relative URL fallback needed - direct function calls work everywhere\n      try {\n        const projectId = process.env.REACT_APP_FIREBASE_PROJECT_ID;\n        if (!projectId) {\n          throw new Error('Firebase Project ID not configured. Please check environment variables.');\n        }\n        \n        const functionUrl = `https://us-central1-${projectId}.cloudfunctions.net/createRazorpayOrder`;\n        console.log('üåê Creating order via Firebase Function:', functionUrl);\n        \n        orderId = await createOrder(functionUrl);\n        console.log('‚úÖ Order created successfully via Firebase Function');\n      } catch (orderError: any) {\n        console.error('üí• CRITICAL: Order creation failed:', orderError.message);\n        \n        // Stop payment process - order creation is required for auto-capture\n        setError(`Failed to create payment order: ${orderError.message}. Please try again or contact support.`);\n        setLoading(false);\n        return; // Stop payment process - don't proceed without order\n      }\n\n      if (!orderId) {\n        const errorMsg = 'Order ID is missing after successful order creation';\n        console.error('üí• CRITICAL:', errorMsg);\n        setError(errorMsg);\n        setLoading(false);\n        return;\n      }\n\n      console.log('üé¨ Opening Razorpay payment modal with order ID:', orderId);\n\n      const options: any = {\n        key: process.env.REACT_APP_RAZORPAY_KEY_ID || 'rzp_test_your_key_here', // Replace with your Razorpay key\n        amount: totalAmount * 100, // Amount in paise\n        currency: 'INR',\n        name: 'Natanam Dance Event',\n        description: `${selectedType.name} Performance Registration`,\n        image: '/logo192.png', // Your logo\n        order_id: orderId, // ‚úÖ ALWAYS use order ID - required for auto-capture\n        handler: function (response: any) {\n          console.log('üéâ Payment Success:', response);\n          onPaymentSuccess({\n            paymentId: response.razorpay_payment_id,\n            orderId: response.razorpay_order_id,\n            signature: response.razorpay_signature,\n            amount: totalAmount,\n            currency: 'INR'\n          });\n        },\n        prefill: {\n          name: getParticipantName(),\n          email: email,\n          contact: phone\n        },\n        notes: {\n          performance_type: performanceType,\n          time_slots: selectedSlots.join(', '),\n          participant_count: participantCount.toString()\n        },\n        theme: {\n          color: '#2563eb'\n        },\n        modal: {\n          ondismiss: function() {\n            setLoading(false);\n            // Don't treat modal dismissal as failure\n          }\n        }\n      };\n\n      const razorpay = new window.Razorpay(options);\n      \n      razorpay.on('payment.failed', function (response: any) {\n        console.log('‚ùå Payment Failed:', response);\n        onPaymentFailure({\n          error: response.error,\n          reason: response.error.reason,\n          description: response.error.description\n        });\n      });\n\n      razorpay.open();\n      // Popup opened, reset loading state\n      setLoading(false);\n      \n    } catch (err: any) {\n      console.error('üí• Payment initialization failed:', err);\n      console.error('üí• Error details:', {\n        message: err.message,\n        stack: err.stack,\n        name: err.name\n      });\n      setError(err.message || 'Failed to initialize payment. Please try again.');\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-gray-800\">Complete Payment</h3>\n        <button\n          onClick={onBack}\n          className=\"text-blue-600 hover:text-blue-800 text-sm font-medium\"\n        >\n          ‚Üê Back\n        </button>\n      </div>\n\n      {/* Payment Summary */}\n      <div className=\"bg-gray-50 rounded-lg p-6 space-y-4\">\n        <h4 className=\"font-medium text-gray-700 mb-3\">Payment Summary</h4>\n        \n        <div className=\"space-y-2 text-sm\">\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Performance Type:</span>\n            <span className=\"font-medium\">{selectedType.name}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Participant(s):</span>\n            <span className=\"font-medium\">{participantCount}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Time Slots:</span>\n            <span className=\"font-medium\">{selectedSlots.length}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Price per person per slot:</span>\n            <span className=\"font-medium\">‚Çπ{selectedType.pricePerPerson}</span>\n          </div>\n          \n          <div className=\"border-t pt-2 mt-3\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"font-medium text-gray-800\">Total Amount:</span>\n              <span className=\"text-xl font-bold text-gray-900\">‚Çπ{totalAmount.toLocaleString()}</span>\n            </div>\n            <p className=\"text-xs text-gray-500 mt-1 text-right\">\n              ‚Çπ{selectedType.pricePerPerson} √ó {participantCount} √ó {selectedSlots.length}\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Selected Time Slots */}\n      <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n        <h4 className=\"font-medium text-blue-800 mb-2\">Selected Time Slots</h4>\n        <div className=\"space-y-1\">\n          {selectedSlots.map((slot, index) => (\n            <p key={index} className=\"text-sm text-blue-700\">‚Ä¢ {slot}</p>\n          ))}\n        </div>\n      </div>\n\n      {/* Payment Instructions */}\n      <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n        <h4 className=\"font-medium text-green-800 mb-2\">Secure Payment</h4>\n        <ul className=\"text-sm text-green-700 space-y-1\">\n          <li>‚Ä¢ Payment is processed securely through Razorpay</li>\n          <li>‚Ä¢ You can pay using UPI, Cards, Net Banking, or Wallets</li>\n          <li>‚Ä¢ Your booking will be confirmed instantly upon successful payment</li>\n          <li>‚Ä¢ You will receive a confirmation email after payment</li>\n        </ul>\n      </div>\n\n      {error && (\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n          <p className=\"text-sm text-red-600\">{error}</p>\n        </div>\n      )}\n\n      <div className=\"flex justify-end space-x-3\">\n        <button\n          onClick={onBack}\n          className=\"px-4 py-2 text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 transition-colors\"\n          disabled={loading}\n        >\n          Back\n        </button>\n        <button\n          onClick={handlePayment}\n          disabled={loading}\n          className=\"px-8 py-3 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed font-medium\"\n        >\n          {loading ? 'Processing...' : `Pay ‚Çπ${totalAmount.toLocaleString()}`}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default RazorpayPayment;\n"],"names":["_ref","selectedSlots","performanceType","participantDetails","onPaymentSuccess","onPaymentFailure","onBack","loading","setLoading","useState","error","setError","selectedType","eventConfig","performanceTypes","find","type","id","_jsx","children","participantCount","getParticipantCount","participantNames","trim","participants","split","filter","name","length","Math","max","totalAmount","pricePerPerson","getParticipantName","fullName","participant1Name","_jsxs","className","onClick","toLocaleString","map","slot","index","disabled","async","Promise","resolve","script","document","createElement","src","onload","onerror","body","appendChild","Error","phone","email","phoneNumber","participant1Phone","representativePhone","orderId","console","log","createOrder","url","orderResp","fetch","method","headers","JSON","stringify","amount","currency","notes","performance_type","time_slots","join","participant_count","toString","status","Object","fromEntries","entries","ok","_data$order","data","json","order","errorText","text","projectId","process","functionUrl","orderError","message","errorMsg","options","key","description","image","order_id","handler","response","paymentId","razorpay_payment_id","razorpay_order_id","signature","razorpay_signature","prefill","contact","theme","color","modal","ondismiss","razorpay","window","Razorpay","on","reason","open","err","stack"],"sourceRoot":""}