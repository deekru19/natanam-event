{"version":3,"file":"static/js/44.afad71a0.chunk.js","mappings":"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","sources":["components/RulesDisplay.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { eventConfig } from '../config/eventConfig';\n\ninterface RulesDisplayProps {\n  onContinue: () => void;\n  onBack: () => void;\n}\n\nconst RulesDisplay: React.FC<RulesDisplayProps> = ({ onContinue, onBack }) => {\n  const [isScrolling, setIsScrolling] = useState(eventConfig.waitForRulesCompletion);\n\n  useEffect(() => {\n    // Auto-scroll animation - only if waitForRulesCompletion is enabled\n    if (!eventConfig.waitForRulesCompletion) {\n      setIsScrolling(false);\n      return;\n    }\n\n    const scrollContainer = document.getElementById('rules-scroll-container');\n    if (!scrollContainer) return;\n\n    const scrollHeight = scrollContainer.scrollHeight;\n    const clientHeight = scrollContainer.clientHeight;\n    const maxScroll = scrollHeight - clientHeight;\n\n    if (maxScroll <= 0) {\n      setIsScrolling(false);\n      return;\n    }\n\n    let currentScroll = 0;\n    const scrollSpeed = 30; // pixels per second\n    const interval = 50; // milliseconds\n    const scrollIncrement = (scrollSpeed * interval) / 1000;\n\n    const scrollTimer = setInterval(() => {\n      currentScroll += scrollIncrement;\n      if (currentScroll >= maxScroll) {\n        currentScroll = maxScroll;\n        setIsScrolling(false);\n        clearInterval(scrollTimer);\n      }\n      scrollContainer.scrollTop = currentScroll;\n    }, interval);\n\n    return () => clearInterval(scrollTimer);\n  }, []);\n\n  const formatRulesText = (text: string) => {\n    return text.split('\\n').map((line, index) => {\n      if (line.trim() === '') {\n        return <br key={index} />;\n      }\n      \n      // Check if it's a title/header (contains \"NATANAM FOUNDATION\" or \"Rules and Regulations\")\n      if (line.includes('NATANAM FOUNDATION') || line.includes('SHYAMOTSAVA')) {\n        return (\n          <h1 key={index} className=\"text-xl sm:text-2xl font-bold text-center text-rose-600 mb-4 font-heading\">\n            {line}\n          </h1>\n        );\n      }\n      \n      if (line.includes('Rules and Regulations')) {\n        return (\n          <h2 key={index} className=\"text-lg sm:text-xl font-bold text-center text-slate-800 mb-6 font-heading\">\n            {line}\n          </h2>\n        );\n      }\n      \n      // Check if it's venue/date/time info\n      if (line.includes('Venue') || line.includes('Date') || line.includes('Time')) {\n        return (\n          <p key={index} className=\"text-center text-slate-700 font-medium mb-2\">\n            {line}\n          </p>\n        );\n      }\n      \n      // Check if it's a numbered rule\n      if (/^\\d+\\./.test(line.trim())) {\n        return (\n          <p key={index} className=\"text-slate-800 mb-3 leading-relaxed font-medium\">\n            <span className=\"font-bold text-rose-600\">{line.match(/^\\d+\\./)?.[0]}</span>\n            {line.replace(/^\\d+\\./, '')}\n          </p>\n        );\n      }\n      \n      // Regular text with some formatting\n      return (\n        <p key={index} className=\"text-slate-700 mb-2 leading-relaxed\">\n          {line}\n        </p>\n      );\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-rose-50 via-orange-50 to-amber-50 p-4 sm:p-6\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"bg-white/90 backdrop-blur-sm rounded-2xl sm:rounded-3xl shadow-2xl border border-rose-200/50 overflow-hidden\">\n          {/* Header */}\n          <div className=\"bg-gradient-to-r from-rose-600 to-orange-600 p-4 sm:p-6\">\n            <div className=\"text-center\">\n              <h2 className=\"text-2xl sm:text-3xl font-bold text-white mb-2 font-heading\">\n                Rules & Regulations\n              </h2>\n              <p className=\"text-rose-100 text-sm sm:text-base\">\n                Please read the following rules carefully\n              </p>\n            </div>\n          </div>\n\n          {/* Rules Content with Auto-scroll */}\n          <div className=\"relative\">\n            <div\n              id=\"rules-scroll-container\"\n              className={`h-96 sm:h-[500px] p-6 sm:p-8 text-sm sm:text-base ${\n                isScrolling ? 'overflow-hidden' : 'overflow-y-auto'\n              }`}\n              style={{\n                scrollBehavior: isScrolling ? 'auto' : 'smooth'\n              }}\n            >\n              <div className=\"space-y-1\">\n                {formatRulesText(eventConfig.rulesAndRegulations)}\n              </div>\n            </div>\n\n            {/* Scroll indicator */}\n            {isScrolling && (\n              <div className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-t from-white via-white/90 to-transparent h-20 flex items-end justify-center pb-4\">\n                <div className=\"flex items-center space-x-2 text-slate-500\">\n                  <div className=\"w-1 h-1 bg-slate-400 rounded-full animate-bounce\"></div>\n                  <div className=\"w-1 h-1 bg-slate-400 rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                  <div className=\"w-1 h-1 bg-slate-400 rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                  <span className=\"text-xs ml-2\">Auto-scrolling...</span>\n                </div>\n              </div>\n            )}\n            \n            {/* Manual scroll indicator */}\n            {!isScrolling && (\n              <div className=\"absolute bottom-0 right-4 text-slate-400 text-xs flex items-center space-x-1\">\n                <svg className=\"w-3 h-3\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v3.586L7.707 9.293a1 1 0 00-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L11 10.586V7z\" clipRule=\"evenodd\" />\n                </svg>\n                <span>Scroll to read more</span>\n              </div>\n            )}\n          </div>\n\n          {/* Navigation Buttons */}\n          <div className=\"bg-slate-50 p-4 sm:p-6\">\n            <div className=\"flex flex-col sm:flex-row justify-between items-center gap-4\">\n              <button\n                onClick={onBack}\n                className=\"w-full sm:w-auto px-6 py-3 text-sm font-medium text-slate-700 bg-white border border-slate-300 rounded-lg hover:bg-slate-50 hover:border-slate-400 transition-all duration-200 shadow-sm\"\n              >\n                ‚Üê Back\n              </button>\n              \n              <div className=\"flex items-center space-x-4\">\n                \n                <button\n                  onClick={onContinue}\n                  disabled={isScrolling}\n                  className={`\n                    px-8 py-3 rounded-lg font-semibold transition-all duration-300 transform hover:scale-105 shadow-lg w-full sm:w-auto\n                    ${isScrolling \n                      ? 'bg-slate-300 text-slate-500 cursor-not-allowed' \n                      : 'bg-gradient-to-r from-rose-600 to-orange-600 text-white hover:from-rose-700 hover:to-orange-700 hover:shadow-xl'\n                    }\n                  `}\n                >\n                  {isScrolling ? 'Please wait...' : 'I have read the rules - Continue'}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RulesDisplay;\n"],"names":["_ref","onContinue","onBack","isScrolling","setIsScrolling","useState","eventConfig","waitForRulesCompletion","useEffect","scrollContainer","document","getElementById","maxScroll","scrollHeight","clientHeight","currentScroll","scrollTimer","setInterval","scrollSpeed","clearInterval","scrollTop","_jsx","className","children","_jsxs","id","style","scrollBehavior","text","rulesAndRegulations","split","map","line","index","trim","includes","test","_line$match","match","replace","animationDelay","fill","viewBox","fillRule","d","clipRule","onClick","disabled"],"sourceRoot":""}