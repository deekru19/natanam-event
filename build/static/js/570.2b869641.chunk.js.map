{"version":3,"file":"static/js/570.2b869641.chunk.js","mappings":"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","sources":["components/FirebaseTest.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { db, storage } from '../firebase/config';\nimport { doc, setDoc, getDoc } from 'firebase/firestore';\nimport { ref, uploadBytes } from 'firebase/storage';\n\nconst FirebaseTest: React.FC = () => {\n  const [testResult, setTestResult] = useState<string>('');\n  const [loading, setLoading] = useState(false);\n\n  const testFirestore = async () => {\n    setLoading(true);\n    setTestResult('Testing Firestore...');\n    \n    try {\n      // Test writing to Firestore\n      const testDoc = doc(db, 'test', 'connection-test');\n      await setDoc(testDoc, {\n        message: 'Firestore connection successful',\n        timestamp: new Date().toISOString()\n      });\n      \n      // Test reading from Firestore\n      const docSnap = await getDoc(testDoc);\n      if (docSnap.exists()) {\n        setTestResult('✅ Firestore: Connection successful! Writing and reading works.');\n      } else {\n        setTestResult('❌ Firestore: Write succeeded but read failed.');\n      }\n    } catch (error: any) {\n      setTestResult(`❌ Firestore Error: ${error.message}`);\n      console.error('Firestore error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const testStorage = async () => {\n    setLoading(true);\n    setTestResult('Testing Storage...');\n    \n    try {\n      // Test uploading to Storage\n      const testFile = new File(['test content'], 'test.txt', { type: 'text/plain' });\n      const storageRef = ref(storage, 'test/test-file.txt');\n      await uploadBytes(storageRef, testFile);\n      \n      setTestResult('✅ Storage: Connection successful! Upload works.');\n    } catch (error: any) {\n      setTestResult(`❌ Storage Error: ${error.message}`);\n      console.error('Storage error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const checkEnvironmentVariables = () => {\n    const requiredVars = [\n      'REACT_APP_FIREBASE_API_KEY',\n      'REACT_APP_FIREBASE_AUTH_DOMAIN',\n      'REACT_APP_FIREBASE_PROJECT_ID',\n      'REACT_APP_FIREBASE_STORAGE_BUCKET',\n      'REACT_APP_FIREBASE_MESSAGING_SENDER_ID',\n      'REACT_APP_FIREBASE_APP_ID'\n    ];\n\n    const missingVars = requiredVars.filter(varName => !process.env[varName]);\n    \n    if (missingVars.length === 0) {\n      setTestResult('✅ Environment Variables: All Firebase variables are set.');\n    } else {\n      setTestResult(`❌ Environment Variables: Missing ${missingVars.join(', ')}`);\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto px-4 py-8\">\n      <div className=\"bg-white rounded-lg shadow-sm p-6\">\n        <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">Firebase Connection Test</h2>\n        \n        <div className=\"space-y-4 mb-6\">\n          <button\n            onClick={checkEnvironmentVariables}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors\"\n          >\n            Check Environment Variables\n          </button>\n          \n          <button\n            onClick={testFirestore}\n            disabled={loading}\n            className=\"px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors disabled:opacity-50\"\n          >\n            Test Firestore Connection\n          </button>\n          \n          <button\n            onClick={testStorage}\n            disabled={loading}\n            className=\"px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 transition-colors disabled:opacity-50\"\n          >\n            Test Storage Connection\n          </button>\n        </div>\n\n        {testResult && (\n          <div className={`p-4 rounded-lg ${\n            testResult.includes('✅') \n              ? 'bg-green-50 border border-green-200' \n              : 'bg-red-50 border border-red-200'\n          }`}>\n            <p className={`text-sm ${\n              testResult.includes('✅') ? 'text-green-800' : 'text-red-800'\n            }`}>\n              {testResult}\n            </p>\n          </div>\n        )}\n\n        <div className=\"mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n          <h3 className=\"font-medium text-yellow-800 mb-2\">Troubleshooting Steps:</h3>\n          <ol className=\"text-sm text-yellow-700 space-y-1\">\n            <li>1. Check if your <code>.env</code> file exists in the dance-event-app folder</li>\n            <li>2. Verify all Firebase environment variables are set correctly</li>\n            <li>3. Ensure Firestore Database is enabled in Firebase Console</li>\n            <li>4. Ensure Storage is enabled in Firebase Console</li>\n            <li>5. Check Firestore and Storage rules allow read/write</li>\n            <li>6. Verify your Firebase project ID matches the one in your config</li>\n          </ol>\n        </div>\n\n        <div className=\"mt-4 p-4 bg-gray-50 border border-gray-200 rounded-lg\">\n          <h3 className=\"font-medium text-gray-800 mb-2\">Example .env file:</h3>\n          <pre className=\"text-xs text-gray-600 bg-white p-2 rounded border\">\n{`REACT_APP_FIREBASE_API_KEY=your_api_key_here\nREACT_APP_FIREBASE_AUTH_DOMAIN=your_project_id.firebaseapp.com\nREACT_APP_FIREBASE_PROJECT_ID=your_project_id\nREACT_APP_FIREBASE_STORAGE_BUCKET=your_project_id.appspot.com\nREACT_APP_FIREBASE_MESSAGING_SENDER_ID=your_messaging_sender_id\nREACT_APP_FIREBASE_APP_ID=your_app_id`}\n          </pre>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FirebaseTest; "],"names":["FirebaseTest","testResult","setTestResult","useState","loading","setLoading","_jsx","className","children","_jsxs","onClick","checkEnvironmentVariables","missingVars","filter","varName","process","length","join","async","testDoc","doc","db","setDoc","message","timestamp","Date","toISOString","getDoc","exists","error","console","disabled","testFile","File","type","storageRef","ref","storage","uploadBytes","includes"],"sourceRoot":""}