{"version":3,"file":"static/js/429.5874c810.chunk.js","mappings":"qLAgBA,MAuMA,EAvM0DA,IAAiD,IAAhD,cAAEC,EAAa,gBAAEC,EAAe,OAAEC,GAAQH,EACnG,MAAOI,EAAOC,IAAYC,EAAAA,EAAAA,UAAiC,CAAC,IACrDC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IASvCG,EAAAA,EAAAA,WAAU,KACR,MAAMC,GAAYC,EAAAA,EAAAA,OAGlBC,EAAAA,EAAAA,IAAuBF,GAGvB,MAAMG,GAAcC,EAAAA,EAAAA,IAAiBJ,EAAYK,IAE/C,MAAMC,GAAcC,EAAAA,EAAAA,IAAcF,GAClCV,EAASW,GACTR,GAAW,KAGb,MAAO,IAAMK,KACZ,IA8FH,OAAIN,GAEAW,EAAAA,EAAAA,KAAA,OAAKC,UAAU,uCAAsCC,UACnDF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oEAMnBE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWC,SAAA,EACxBC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,2CAA0CC,SAAC,uBACzDF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,wBAAuBC,SAAC,2FAMvCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,SArIM,CAClC,CAAEE,MAAO,UAAWC,UAAW,IAAQC,QAAS,KAChD,CAAEF,MAAO,YAAaC,UAAW,IAASC,QAAS,MACnD,CAAEF,MAAO,UAAWC,UAAW,KAASC,QAAS,OAmI/BC,IAjEOC,IACzB,MAAMC,EARoBD,IACnBE,OAAOC,KAAKzB,GAAO0B,OAAOC,IAC/B,MAAMC,GAAUC,EAAAA,EAAAA,IAAcF,GAC9B,OAAOC,GAAWN,EAAQH,WAAaS,EAAUN,EAAQF,UAKtCU,CAAmBR,GAExC,OAA4B,IAAxBC,EAAaQ,OACR,MAIPd,EAAAA,EAAAA,MAAA,OAAyBF,UAAU,YAAWC,SAAA,EAC5CC,EAAAA,EAAAA,MAAA,MAAIF,UAAU,oEAAmEC,SAAA,CAC9EM,EAAQJ,MAAM,KAAGK,EAAaQ,OAAO,wBAExCjB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,uDAAsDC,SAClEO,EAAaF,IAAKM,IACjB,MAAMK,EA5BOL,IACjB9B,EAAcoC,SAASN,GAClB,WAEF3B,EAAM2B,IAAa,YAwBHO,CAAcP,GAE7B,OACEb,EAAAA,EAAAA,KAAA,UAEEqB,QAASA,IAjEER,KACvB,GAAwB,cAApB3B,EAAM2B,GAA2B,OAErC,IAAIS,EAEAvC,EAAcoC,SAASN,GAEzBS,EAAmBvC,EAAc6B,OAAOW,GAAQA,IAASV,GAG5B,IAAzB9B,EAAckC,OAEhBK,EAAmB,CAACT,GAGD9B,EAAcyC,KAAKD,IAAQE,EAAAA,EAAAA,IAAeF,EAAMV,KAIjES,EAAmB,IAAIvC,EAAe8B,GAEtCS,EAAiBI,KAAK,CAACC,EAAGC,KAAMb,EAAAA,EAAAA,IAAcY,IAAKZ,EAAAA,EAAAA,IAAca,KAGjEN,EAAmB,CAACT,GAK1B7B,EAAgBsC,IAoCWO,CAAgBhB,GAC/BiB,SAA8B,WAApB5C,EAAM2B,GAChBZ,UAAW,kHAEI,cAAXiB,EACE,gFACW,aAAXA,EACA,yCACA,mFAEJhB,SAEDW,GAbIA,SAVLL,EAAQJ,WA6DjBrB,EAAckC,OAAS,IACtBd,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iCAAgCC,SAAA,EAC7CC,EAAAA,EAAAA,MAAA,MAAIF,UAAU,iCAAgCC,SAAA,CAAC,8BACjBnB,EAAckC,OAAO,QAEnDjB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,uBAAsBC,SAClCnB,EAAcwB,IAAI,CAACgB,EAAMQ,KACxB/B,EAAAA,EAAAA,KAAA,QAEEC,UAAU,uEAAsEC,SAE/EqB,GAHIQ,OAOX5B,EAAAA,EAAAA,MAAA,KAAGF,UAAU,6BAA4BC,SAAA,CAAC,UAChCnB,EAAckC,OAAO,QAA+B,IAAzBlC,EAAckC,OAAe,IAAM,UAM5Ed,EAAAA,EAAAA,MAAA,OAAKF,UAAU,uDAAsDC,SAAA,EACnEF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,mCAAkCC,SAAC,qBACjDC,EAAAA,EAAAA,MAAA,MAAIF,UAAU,oCAAmCC,SAAA,EAC/CF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,uFACJF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,iDACJF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,uDACJF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,8EACJF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,8DAKRF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wBAAuBC,UACpCF,EAAAA,EAAAA,KAAA,UACEqB,QAjEWW,KACbjD,EAAckC,OAAS,GACzBhC,KAgEI6C,SAAmC,IAAzB/C,EAAckC,OACxBhB,UAAW,iFAEPlB,EAAckC,OAAS,EACrB,2CACA,6DAEJf,SAEDnB,EAAckC,OAAS,EACpB,iBAAiBlC,EAAckC,cAAuC,IAAzBlC,EAAckC,OAAe,IAAM,KAChF,kC","sources":["components/TimeSlotSelector.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { subscribeToSlots, initializeSlotsForDate } from '../services/firebaseService';\nimport { getEventDate, isAdjacentSlot, sortTimeSlots, timeToMinutes } from '../utils/timeUtils';\n\ninterface TimeSlotSelectorProps {\n  selectedSlots: string[];\n  onSlotSelection: (slots: string[]) => void;\n  onNext: () => void;\n}\n\ninterface TimeSection {\n  title: string;\n  startTime: number; // in minutes\n  endTime: number; // in minutes\n}\n\nconst TimeSlotSelector: React.FC<TimeSlotSelectorProps> = ({ selectedSlots, onSlotSelection, onNext }) => {\n  const [slots, setSlots] = useState<Record<string, string>>({});\n  const [loading, setLoading] = useState(true);\n\n  // Define time sections\n  const timeSections: TimeSection[] = [\n    { title: 'Morning', startTime: 9 * 60, endTime: 12 * 60 }, // 9 AM to 12 PM\n    { title: 'Afternoon', startTime: 12 * 60, endTime: 17 * 60 }, // 12 PM to 5 PM\n    { title: 'Evening', startTime: 17 * 60, endTime: 20 * 60 }, // 5 PM to 8 PM\n  ];\n\n  useEffect(() => {\n    const eventDate = getEventDate();\n    \n    // Initialize slots if they don't exist\n    initializeSlotsForDate(eventDate);\n    \n    // Subscribe to real-time updates\n    const unsubscribe = subscribeToSlots(eventDate, (updatedSlots) => {\n      // Sort the slots by time of day\n      const sortedSlots = sortTimeSlots(updatedSlots);\n      setSlots(sortedSlots);\n      setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  const handleSlotClick = (timeSlot: string) => {\n    if (slots[timeSlot] !== 'available') return;\n\n    let newSelectedSlots: string[];\n\n    if (selectedSlots.includes(timeSlot)) {\n      // Remove slot\n      newSelectedSlots = selectedSlots.filter(slot => slot !== timeSlot);\n    } else {\n      // Add slot - ensure it's continuous with existing selection\n      if (selectedSlots.length === 0) {\n        // First slot selection\n        newSelectedSlots = [timeSlot];\n      } else {\n        // Check if the new slot is adjacent to any existing slot\n        const isAdjacent = selectedSlots.some(slot => isAdjacentSlot(slot, timeSlot));\n        \n        if (isAdjacent) {\n          // Add to existing continuous selection\n          newSelectedSlots = [...selectedSlots, timeSlot];\n          // Sort by time to maintain order\n          newSelectedSlots.sort((a, b) => timeToMinutes(a) - timeToMinutes(b));\n        } else {\n          // Replace selection with new slot (not continuous)\n          newSelectedSlots = [timeSlot];\n        }\n      }\n    }\n\n    onSlotSelection(newSelectedSlots);\n  };\n\n  const getSlotStatus = (timeSlot: string) => {\n    if (selectedSlots.includes(timeSlot)) {\n      return 'selected';\n    }\n    return slots[timeSlot] || 'available';\n  };\n\n  const getSlotsForSection = (section: TimeSection) => {\n    return Object.keys(slots).filter(timeSlot => {\n      const minutes = timeToMinutes(timeSlot);\n      return minutes >= section.startTime && minutes < section.endTime;\n    });\n  };\n\n  const renderTimeSection = (section: TimeSection) => {\n    const sectionSlots = getSlotsForSection(section);\n    \n    if (sectionSlots.length === 0) {\n      return null;\n    }\n\n    return (\n      <div key={section.title} className=\"space-y-4\">\n        <h4 className=\"text-lg font-semibold text-gray-800 border-b border-gray-200 pb-2\">\n          {section.title} ({sectionSlots.length} slots available)\n        </h4>\n        <div className=\"grid grid-cols-3 gap-2 sm:grid-cols-4 md:grid-cols-6\">\n          {sectionSlots.map((timeSlot) => {\n            const status = getSlotStatus(timeSlot);\n            \n            return (\n              <button\n                key={timeSlot}\n                onClick={() => handleSlotClick(timeSlot)}\n                disabled={slots[timeSlot] === 'booked'}\n                className={`\n                  p-3 text-sm font-medium rounded-lg border-2 transition-all duration-200\n                  ${status === 'available' \n                    ? 'border-gray-300 bg-white text-gray-700 hover:border-blue-500 hover:bg-blue-50' \n                    : status === 'selected'\n                    ? 'border-blue-500 bg-blue-500 text-white'\n                    : 'border-gray-200 bg-gray-100 text-gray-400 cursor-not-allowed'\n                  }\n                `}\n              >\n                {timeSlot}\n              </button>\n            );\n          })}\n        </div>\n      </div>\n    );\n  };\n\n  const handleNext = () => {\n    if (selectedSlots.length > 0) {\n      onNext();\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center p-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">Select Time Slots</h3>\n        <p className=\"text-sm text-gray-600\">\n          Click on available slots to select them. You can select multiple continuous slots.\n        </p>\n      </div>\n      \n      {/* Time Sections */}\n      <div className=\"space-y-6\">\n        {timeSections.map(renderTimeSection)}\n      </div>\n      \n      {/* Selected Slots Summary */}\n      {selectedSlots.length > 0 && (\n        <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\n          <h4 className=\"font-medium text-blue-800 mb-2\">\n            Selected Continuous Slots ({selectedSlots.length})\n          </h4>\n          <div className=\"flex flex-wrap gap-2\">\n            {selectedSlots.map((slot, index) => (\n              <span\n                key={index}\n                className=\"px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm font-medium\"\n              >\n                {slot}\n              </span>\n            ))}\n          </div>\n          <p className=\"text-sm text-blue-600 mt-2\">\n            Total: {selectedSlots.length} slot{selectedSlots.length !== 1 ? 's' : ''}\n          </p>\n        </div>\n      )}\n\n      {/* Instructions */}\n      <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n        <h4 className=\"font-medium text-yellow-800 mb-2\">Selection Rules</h4>\n        <ul className=\"text-sm text-yellow-700 space-y-1\">\n          <li>• You can select multiple continuous slots (e.g., 9:00 AM, 9:10 AM, 9:20 AM)</li>\n          <li>• Slots must be adjacent to each other</li>\n          <li>• Click a selected slot again to deselect it</li>\n          <li>• Selecting a non-adjacent slot will replace your current selection</li>\n          <li>• Booked slots are grayed out and unavailable</li>\n        </ul>\n      </div>\n\n      {/* Next Button */}\n      <div className=\"flex justify-end pt-4\">\n        <button\n          onClick={handleNext}\n          disabled={selectedSlots.length === 0}\n          className={`\n            px-6 py-2 rounded-md font-medium transition-colors\n            ${selectedSlots.length > 0\n              ? 'bg-blue-600 text-white hover:bg-blue-700'\n              : 'bg-gray-300 text-gray-500 cursor-not-allowed'\n            }\n          `}\n        >\n          {selectedSlots.length > 0 \n            ? `Continue with ${selectedSlots.length} slot${selectedSlots.length !== 1 ? 's' : ''}`\n            : 'Select at least one slot'\n          }\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default TimeSlotSelector; "],"names":["_ref","selectedSlots","onSlotSelection","onNext","slots","setSlots","useState","loading","setLoading","useEffect","eventDate","getEventDate","initializeSlotsForDate","unsubscribe","subscribeToSlots","updatedSlots","sortedSlots","sortTimeSlots","_jsx","className","children","_jsxs","title","startTime","endTime","map","section","sectionSlots","Object","keys","filter","timeSlot","minutes","timeToMinutes","getSlotsForSection","length","status","includes","getSlotStatus","onClick","newSelectedSlots","slot","some","isAdjacentSlot","sort","a","b","handleSlotClick","disabled","index","handleNext"],"sourceRoot":""}