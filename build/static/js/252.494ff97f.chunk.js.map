{"version":3,"file":"static/js/252.494ff97f.chunk.js","mappings":"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","sources":["components/PaymentStatusChecker.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { checkPaymentStatus, listenToBookingStatus } from '../services/firebaseService';\nimport { eventConfig } from '../config/eventConfig';\n\ninterface PaymentStatusCheckerProps {\n  paymentData: any;\n  selectedSlots: string[];\n  performanceType: string;\n  participantDetails: Record<string, any>;\n  onStatusConfirmed: () => void;\n  onStatusFailed: (reason?: string) => void;\n}\n\nconst PaymentStatusChecker: React.FC<PaymentStatusCheckerProps> = ({\n  paymentData,\n  selectedSlots,\n  performanceType,\n  participantDetails,\n  onStatusConfirmed,\n  onStatusFailed\n}) => {\n  const [checking, setChecking] = useState(true);\n  const [countdown, setCountdown] = useState(30); // 30 seconds timeout\n  const [status, setStatus] = useState<'checking' | 'confirmed' | 'failed'>('checking');\n\n  useEffect(() => {\n    if (!paymentData?.paymentId) {\n      onStatusFailed('Invalid payment data');\n      return;\n    }\n\n    // Start countdown timer\n    const countdownInterval = setInterval(() => {\n      setCountdown(prev => {\n        if (prev <= 1) {\n          clearInterval(countdownInterval);\n          setChecking(false);\n          onStatusFailed('Webhook timeout - payment status unclear');\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n\n    // Listen to booking status changes in real-time\n    const unsubscribe = listenToBookingStatus(\n      paymentData.paymentId,\n      (bookingStatus, booking) => {\n        console.log('Booking status update:', bookingStatus, booking);\n        \n        if (bookingStatus === 'confirmed') {\n          clearInterval(countdownInterval);\n          setStatus('confirmed');\n          setChecking(false);\n          onStatusConfirmed();\n        } else if (bookingStatus === 'cancelled') {\n          clearInterval(countdownInterval);\n          setStatus('failed');\n          setChecking(false);\n          const reason = booking?.paymentData?.errorReason || 'Payment was declined or failed';\n          onStatusFailed(reason);\n        }\n      }\n    );\n\n    // Also check status immediately and every 3 seconds as fallback\n    const statusCheckInterval = setInterval(async () => {\n      try {\n        const result = await checkPaymentStatus(paymentData.paymentId);\n        console.log('Payment status check result:', result);\n        \n        if (result.status === 'confirmed') {\n          clearInterval(countdownInterval);\n          clearInterval(statusCheckInterval);\n          setStatus('confirmed');\n          setChecking(false);\n          onStatusConfirmed();\n        } else if (result.status === 'cancelled') {\n          clearInterval(countdownInterval);\n          clearInterval(statusCheckInterval);\n          setStatus('failed');\n          setChecking(false);\n          const reason = result.booking?.paymentData?.errorReason || 'Payment was declined or failed';\n          onStatusFailed(reason);\n        }\n      } catch (error) {\n        console.error('Error checking payment status:', error);\n      }\n    }, 3000);\n\n    // Cleanup function\n    return () => {\n      clearInterval(countdownInterval);\n      clearInterval(statusCheckInterval);\n      unsubscribe();\n    };\n  }, [paymentData?.paymentId, onStatusConfirmed, onStatusFailed]);\n\n  const selectedType = eventConfig.performanceTypes.find(type => type.id === performanceType);\n\n  if (!checking) {\n    return null; // Component will be unmounted by parent\n  }\n\n  return (\n    <div className=\"text-center space-y-6\">\n      {/* Processing Icon */}\n      <div className=\"w-20 h-20 bg-blue-100 rounded-full flex items-center justify-center mx-auto\">\n        <div className=\"w-10 h-10 border-4 border-blue-600 border-t-transparent rounded-full animate-spin\"></div>\n      </div>\n\n      {/* Processing Message */}\n      <div>\n        <h3 className=\"text-2xl font-bold text-gray-800 mb-2\">Processing Payment...</h3>\n        <p className=\"text-gray-600 mb-4\">\n          Please wait while we confirm your payment with our payment provider.\n        </p>\n        \n        <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3 mb-4 inline-block\">\n          <p className=\"text-sm text-blue-700\">\n            <span className=\"font-medium\">Payment ID:</span> {paymentData.paymentId}\n          </p>\n        </div>\n      </div>\n\n      {/* Countdown */}\n      <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4 max-w-md mx-auto\">\n        <p className=\"text-sm text-yellow-700\">\n          <span className=\"font-medium\">Timeout in {countdown} seconds</span>\n        </p>\n        <p className=\"text-xs text-yellow-600 mt-1\">\n          We're waiting for payment confirmation from Razorpay\n        </p>\n      </div>\n\n      {/* Payment Summary */}\n      <div className=\"bg-gray-50 rounded-lg p-6 text-left max-w-md mx-auto\">\n        <h4 className=\"font-semibold text-gray-800 mb-4 text-center\">Payment Details</h4>\n        <div className=\"space-y-3 text-sm\">\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Performance:</span>\n            <span className=\"font-medium\">{selectedType?.name}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Time Slots:</span>\n            <span className=\"font-medium\">{selectedSlots.length}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Amount Paid:</span>\n            <span className=\"font-bold text-green-600\">₹{paymentData.amount?.toLocaleString()}</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Instructions */}\n      <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 max-w-md mx-auto\">\n        <h4 className=\"font-medium text-blue-800 mb-2\">What's happening?</h4>\n        <ul className=\"text-sm text-blue-700 space-y-1 text-left\">\n          <li>• Your payment has been submitted to Razorpay</li>\n          <li>• We're waiting for payment confirmation</li>\n          <li>• This usually takes 5-10 seconds</li>\n          <li>• Please don't close this page</li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default PaymentStatusChecker;\n"],"names":["_ref","_paymentData$amount","paymentData","selectedSlots","performanceType","participantDetails","onStatusConfirmed","onStatusFailed","checking","setChecking","useState","countdown","setCountdown","status","setStatus","useEffect","paymentId","countdownInterval","setInterval","prev","clearInterval","unsubscribe","listenToBookingStatus","bookingStatus","booking","console","log","_booking$paymentData","reason","errorReason","statusCheckInterval","async","result","checkPaymentStatus","_result$booking","_result$booking$payme","error","selectedType","eventConfig","performanceTypes","find","type","id","_jsxs","className","children","_jsx","name","length","amount","toLocaleString"],"sourceRoot":""}